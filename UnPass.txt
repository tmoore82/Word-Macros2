Public Sub UnPass_NT()
'Version 5

'tmoore82
'10/08/12

'Removes editing restriction from a doc.

'Note that there is a difference between
'unencrypting a document (a doc that you need
'a password to open), and removing editing
'restrictions. This will do the latter.

'If you are in doubt about the legality or
'ethics of removing password restriction from
'a doc, don't do it. This is mainly to help
'users who forgot a password, or clients who
'have acquired the files legitimately (say
'by buying out the company) but don't have
'easy or any access to the original passwords.

'You need to have a directory labeled "dmm"
'on your C drive. (C:\dmm)

'This will store the password information in a new
'doc on your desktop, in case, for any reason,
'you might need to restore the password.

On Error GoTo ErrMsg

CreateZip_NT 'This is in my XML editing pack
RemoveRestrictionXML_NT

Exit Sub

ErrMsg:
    UhOhNT

End Sub
Private Sub RemoveRestrictionXML_NT()


'On Error GoTo ErrMsg

strParseMe = strDMM & "\word\settings.xml"
Documents.Open FileName:=strParseMe, Format:=wdOpenFormatText

Dim docSettings As Document
Set docSettings = ActiveDocument

Application.ScreenUpdating = False

    With Selection.Find
        .Text = "(\<w:documentProtection)(*)(/\>)"
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchWildcards = True
        .Execute
    End With

strPassword = Selection.Text
Documents.Add
Dim docPassword As Document
Set docPassword = ActiveDocument
Selection.TypeText Text:=strPassword

docPassword.SaveAs2 FileName:="c:\users\mooret\Desktop\restore-pw.docx"
docPassword.Close True

docSettings.Close

'declare and initiate a variable for our regular expression
Dim FindThis
FindThis = "\<w:documentProtection .*?/\>"

'declare and initiate a regular expression object
Dim RegEx
Set RegEx = CreateObject("vbscript.regexp")

'tell the regex what to look for and to search the whole doc
With RegEx
    .Pattern = FindThis
End With

'set constants for reading and writing (because my memory can't handle numbers)
Const ForReading = 1
Const ForWriting = 2
Const ForAppending = 8

    'create a file system object
    'this gains access to the computer's file system
    Set objFSO = CreateObject("Scripting.FileSystemObject")

    Set objFile = objFSO.OpenTextFile("C:\dmm\word\settings.xml", ForReading)
    strText = objFile.Readall
    objFile.Close

    Set objFile = objFSO.OpenTextFile("C:\dmm\word\settings.xml", ForWriting)
    strNewText = RegEx.Replace(strText, "<w:documentProtection />")
    objFile.WriteLine strNewText
    objFile.Close

Application.ScreenUpdating = True

ReZip_NT (strNewName)

Exit Sub

ErrMsg:
UhOhNT

End Sub
Private Sub ReZip_NT(FreshFile As String)

        'Create empty Zip File
        NewZip_NT (strNewName)

Call Copy_Files_NT(FromFolder:=strDMM, ToFolder:=FreshFile, FolderItself:=False)

Dim strOldZip, strNewDocX
strOldZip = strNewName
strNewDocX = strNewName & "-unpass2.docx"
strFullName = strNewDocX

Sleep 2000

Name strOldZip As strNewDocX

Fresh_NT

End Sub
Private Sub NewZip_NT(sPath)

'following copied from http://www.rondebruin.nl/windowsxpzip.htm on 08/NT0/1NT
'Create empty Zip File

    If Len(Dir(sPath)) < 0 Then Kill sPath
    Open sPath For Output As #1
    Print #1, Chr$(80) & Chr$(75) & Chr$(5) & Chr$(6) & String(18, 0)
    Close #1

End Sub
Private Sub Fresh_NT()

'On Error GoTo ErrMsg
'MsgBox (strFullName)
Documents.Open FileName:=strFullName

Word.Application.WindowState = wdWindowStateMaximize
Application.ScreenUpdating = True

CompletedNT

Exit Sub

ErrMsg:
UhOhNT

End Sub